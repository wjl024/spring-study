<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--&lt;!&ndash;配置一个Hello的bean,等同于Hello hello=new HelloImpl&ndash;&gt;-->
    <!--<bean id="hello" class="com.spring.aop.HelloImpl"/>-->
    <!--&lt;!&ndash;配置一个MyBeforeAdvice前置增强的bean&ndash;&gt;-->
    <!--<bean id="mybeforeadvice" class="com.spring.aop.MyBeforeAdvice"/>-->
    <!--&lt;!&ndash;进行AOP的配置&ndash;&gt;-->
    <!--<aop:config>-->
        <!--<aop:aspect id="before" ref="mybeforeadvice">-->
            <!--<aop:pointcut id="myPointCut" expression="execution(* com.spring.aop.*.*(..))"/>-->
            <!--<aop:before method="beforeMethod" pointcut-ref="myPointCut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->
    <!--<bean id="user" class="com.spring.aop.UserDaoimpl"/>-->
    <!--<bean id="beforeadvice" class="com.spring.aop.BeforeAdvice"/>-->
    <!--<aop:config>-->
        <!--<aop:aspect id="before1" ref="beforeadvice">-->
            <!--<aop:pointcut id="PointCut" expression="execution(* com.spring.aop.*.*(..))"/>-->
            <!--<aop:before method="beforeMethod" pointcut-ref="PointCut"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->
    <!--<aop:aspectj-autoproxy/>-->
    <!--<bean id="fighter" class="com.spring.aop.Fighter"/>-->
    <!--<bean id="tiger" class="com.spring.aop.Tiger"/>-->
    <!--<aop:aspectj-autoproxy/>-->
    <!--<bean id="imageCopy" class="com.spring.aop.ImageCopy"/>-->
    <!--<bean id="imagehandler" class="com.spring.aop.ImageHandler"/>-->


    <!--读入外部数据库连接属性文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--扫描Service包的组件-->
    <context:component-scan base-package="com.spring.aop.service"/>

    <!--通过druid配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化大小 -->
        <property name="initialSize" value="20"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 连接空闲时测试是否有效 -->
        <property name="testWhileIdle" value="false"/>
        <!-- 获取连接时测试是否有效 -->
        <property name="testOnBorrow" value="false"/>
        <!-- 归还连接时是否测试有效 -->
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache缓存，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
    </bean>

    <!-- 配置mybatis的Session -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.spring.aop.entity"/>
    </bean>

    <!-- 配置通用Mapper -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.spring.aop.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="markerInterface" value="com.spring.BaseDAO"/>
        <property name="properties">
            <value>
                mappers = com.spring.BaseDAO
                IDENTITY = MYSQL
            </value>
        </property>
    </bean>
    <!--事务管理bean -->
    <bean id="manager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 使用声明式事务 -->
    <tx:annotation-driven transaction-manager="manager"/>
</beans>